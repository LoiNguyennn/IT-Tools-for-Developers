@model dynamic
@{
    ViewData["Title"] = "Register";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="~/css/register.css"/>

<div class="register-container">
    <!-- Decorative elements -->
    <div class="decoration decoration-1"></div>
    <div class="decoration decoration-2"></div>

    <div class="register-header">
        <h2>Create Account</h2>
        <p>Join our community to access all features</p>
    </div>

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="form-message error-message">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <p class="mb-0">@error.ErrorMessage</p>
            }
        </div>
    }

    <form asp-action="Register" method="post">
        <div class="mb-4">
            <label for="email" class="form-label">Email Address</label>
            <input type="email" class="form-control" id="email" name="email" placeholder="Enter your email address" required />
        </div>

        <div class="mb-4">
            <label for="password" class="form-label">Create Password</label>
            <div class="password-container">
                <input type="password" class="form-control" id="password" name="password" placeholder="Enter a secure password" required />
                <span class="password-toggle" id="passwordToggle">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-eye" viewBox="0 0 16 16">
                        <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z" />
                        <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z" />
                    </svg>
                </span>
                <div class="password-strength">
                    <div class="password-strength-meter" id="strengthMeter"></div>
                </div>
                <small class="form-text text-muted">Password must be at least 8 characters with letters and numbers</small>
            </div>
        </div>

        <div class="mb-3 form-check">
            <input type="checkbox" class="form-check-input" id="termsCheck" required>
            <label class="form-check-label" for="termsCheck">I agree to the <a href="#">Terms of Service</a> and <a href="#">Privacy Policy</a></label>
        </div>

        <div class="d-grid gap-2 mt-4">
            <button type="submit" class="btn btn-primary">Sign Up</button>
        </div>
    </form>

    <div class="link-section">
        <p class="mb-0">
            Already have an account? <a asp-action="Login">Log in here</a>
        </p>
    </div>
</div>

<script>
    // Toggle password visibility
    document.getElementById('passwordToggle').addEventListener('click', function() {
        const passwordInput = document.getElementById('password');
        const icon = this.querySelector('svg');

        if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            icon.innerHTML = `
                <path d="M13.359 11.238C15.06 9.72 16 8 16 8s-3-5.5-8-5.5a7.028 7.028 0 0 0-2.79.588l.77.771A5.944 5.944 0 0 1 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.134 13.134 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755-.165.165-.337.328-.517.486l.708.709z"/>
                <path d="M11.297 9.176a3.5 3.5 0 0 0-4.474-4.474l.823.823a2.5 2.5 0 0 1 2.829 2.829l.822.822zm-2.943 1.299.822.822a3.5 3.5 0 0 1-4.474-4.474l.823.823a2.5 2.5 0 0 0 2.829 2.829z"/>
                <path d="M3.35 5.47c-.18.16-.353.322-.518.487A13.134 13.134 0 0 0 1.172 8l.195.288c.335.48.83 1.12 1.465 1.755C4.121 11.332 5.881 12.5 8 12.5c.716 0 1.39-.133 2.02-.36l.77.772A7.029 7.029 0 0 1 8 13.5C3 13.5 0 8 0 8s.939-1.721 2.641-3.238l.708.709zm10.296 8.884-12-12 .708-.708 12 12-.708.708z"/>
            `;
        } else {
            passwordInput.type = 'password';
            icon.innerHTML = `
                <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z"/>
                <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z"/>
            `;
        }
    });

    // Simple password strength meter
    document.getElementById('password').addEventListener('input', function() {
        const password = this.value;
        const meter = document.getElementById('strengthMeter');

        if (password.length === 0) {
            meter.style.width = '0%';
            return;
        }

        let strength = 0;

        // Length check
        if (password.length >= 8) strength += 25;

        // Contains lowercase
        if (/[a-z]/.test(password)) strength += 25;

        // Contains uppercase
        if (/[A-Z]/.test(password)) strength += 25;

        // Contains number
        if (/[0-9]/.test(password)) strength += 25;

        meter.style.width = strength + '%';

        // Change color based on strength
        if (strength < 50) {
            meter.style.background = '#ff4d4d';
        } else if (strength < 75) {
            meter.style.background = '#ffb84d';
        } else {
            meter.style.background = '#52c41a';
        }
    });
</script>